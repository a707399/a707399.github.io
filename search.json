[{"title":"信息论在老鼠毒药问题中的应用","url":"http://yoursite.com/2018/06/14/信息论在老老鼠毒药问题中的应用/","content":"<center><strong>信息论在老鼠毒药问题中的应用</strong></center>\n\n<blockquote>\n<p><em>有100只一模一样的瓶子，编号1-100。其中99瓶是水，一瓶是看起来像水的毒药。只要老鼠喝下一小口毒药，一天后则死亡。现在，你有7只老鼠和一天的时间，如何检验出哪个号码瓶子里是毒药？</em></p>\n</blockquote>\n<p>&amp;nbsp 上面的问题我们称作“问题1”，通过思考这道题的解题方法可以提高我们对二进制的理解能力。</p>\n\n<hr>\n<p>####相信大家早已了解如何解答这个问题，在此给出最常见的答案：</p>\n<blockquote>\n<p>######首先，将瓶子的10进制编号数改成7位的2进制码。然后，让第1只老鼠喝所有2进制码第1位是1的瓶子中的水；让第2只老鼠喝所有2进制码第2位是1的瓶子中的水；以此类推下去。这样，每个老鼠第二天的死活情况就决定了毒水瓶子二进制码这一位的数字：老鼠死，对应1，反之为0。换言之，将7只老鼠死活情况排成一排。比如说结果是“死活死死活活死”的话，毒水瓶子的二进制标签就是：1011001，转换成10进制，得到89。</p>\n</blockquote>\n<p>###</p>\n<hr>\n<p>#####这道题可以有很多种在各个参数方向的扩张和一般化。最“通-通-通-通”的解够你研究好一阵子。比如，如果我们把题目稍加变化（问题2）：###</p>\n<blockquote>\n<p>有100只一模一样的瓶子，编号1-100。其中99瓶是水，一瓶是看起来像水的毒药。只要老鼠喝下一小口毒药，一天后则死亡。现在，给你2天的时间，请你告诉我，你至少需要多少只老鼠，才能检验出哪个号码瓶子里是毒药？</p>\n</blockquote>\n<p>比较原来的题目，这个题目有两个变化：一是给你的时间多了一天。因为老鼠喝毒药1天之后死去，2天意味着你可以做两次实验，这给了你一个时间方向（实验次数）的空间，有可能让你用更少数目的老鼠，达到同样的目的。</p>\n<p>第二个改变是提问的方式。这次的问题是：你‘至少’需要多少只老鼠？回答这类问题，是只要估计一个下限，对你来说，做实验的小白鼠多多益善，但你的老板要花钱买它们，他得考虑经济效益。当你还没有完全把方案想清楚之前，你好歹给老板一个交代呀。这种时候，<strong>信息论</strong>能派得上一点用场。</p>\n<hr>\n<p>刚才我说‘信息论’，实际上，我们完全用不上什么信息论的任何高深理论，用的只不过是由香农定义的计算信息量的一个公式而已。牛刀杀鸡虽然太大，但用它锋利的小尖给开个小口也未尝不可。</p>\n<blockquote>\n<p>科学（不仅限于数学）上的大多数研究，说穿了就是一个处理‘信息’的过程。摈弃无用的信息，想办法得到有用而正确的信息，用以消除原来课题中的不确定性，得到更为确定的科学规律。</p>\n</blockquote>\n<p>#######那么，我们首先要明白，什么是信息？</p>\n<blockquote>\n<p>这是一个古老的问题，又是一个现代的问题，也是一个迄今为止仍然众说纷纭、悬而未决的问题，特别是在社会所认可的广义信息的层面上。</p>\n</blockquote>\n<blockquote>\n<p>你要是问：“什么是信息？”，人人都能列出一大串他称之为‘信息’的东西：新闻、消息、音乐、图片……。然而如果问：“信息是什么？”那就难以回答了。因为你可以说：“音乐是信息”，但你不能说：“信息是音乐”；你可以说：“照片是信息”，但你不能说：“信息是照片”。要给信息下个定义是不容易的。‘信息’的定义需要从许多具体信息表现形式中抽象出它们的共性来。</p>\n</blockquote>\n<blockquote>\n<p>中国古人理解的信息其实很简单，正如李清照的名句中所述：“不乞隋珠与和璧，只乞乡关新信息。”，看来这只是通俗意义上的‘音讯’或‘消息’而已。</p>\n</blockquote>\n<blockquote>\n<p>现代人比较考究，注重科学。因此而成天琢磨：信息到底是什么？信息是主观的还是客观的？是相对的还是绝对的？</p>\n</blockquote>\n<blockquote>\n<p>昨天北京发大水，你将这个消息，用电话告知你南京的两个朋友，可是，A说他早知此事，B原来不知晓，因此，这条消息对A来说，没有增加任何信息，对B来说就增加了信息。B抱着的小狗好像也听见了电话中的声音，但它不懂人的语言，这对它来说也不是信息。</p>\n</blockquote>\n<p>######信息是模糊的还是精确的？</p>\n<blockquote>\n<p>你走到树林里，艳阳高照、和风习习、桃红李白、燕飞鸟鸣，大自然传递给我们许多信息，这些算是没有精确度量过的、模糊的信息。</p>\n</blockquote>\n<blockquote>\n<p>信息和‘知识’是一码事吗？也应该不是。众所周知，我们的信息化社会虽然充满了信息，但其中“鱼龙混杂，良莠不齐”，以至于大家都希望自己的孩子不要整天沉迷于网上，许多人抱怨：“信息虽发达，知识却贫乏”。所以，信息并不等同于知识！</p>\n</blockquote>\n<blockquote>\n<p>文学家、哲学家、社会学家……，各家各派都对‘信息’有不同的理解和说法。这其中，物理学家们，是如何理解和定义信息的呢？</p>\n</blockquote>\n<blockquote>\n<p>物理学家们的研究对象是物质和物质的运动，即物质和能量。在他们看来，信息是什么呢？是否能归类进这两个他们所熟悉的概念呢？</p>\n</blockquote>\n<blockquote>\n<p>信息显然不是物质，它应该是物质的一种属性，听起来和能量有些类似，但它显然也不是能量。物理学中的能量早就有其精确的、可度量的定义，它衡量的是物体（物质）做功的本领。信息与这种‘功’似乎无直接关联。当然，我们又知道，信息是很有用的，个人和社会都可以利用信息来产生价值，这不又有点类似于‘做功’了吗？对此，物理学家仍然摇头：不一样啊，你说的好像是精神上的价值。</p>\n</blockquote>\n<blockquote>\n<p>信息属于精神范畴吗？那也不对啊，从科学家们的眼中看来，信息，仍然应该是一种独立于人类的主观精神世界、客观存在的东西。因此，到了最后，有人便宣称说：</p>\n</blockquote>\n<blockquote>\n<p>“组成我们的客观世界，有三大基本要素：除了物质和能量之外，还有信息。”</p>\n</blockquote>\n<hr>\n<p>美国学者、哈佛大学的欧廷格（A．G．Oettinger）对这三大基本要素作了精辟的诠释：</p>\n<p>“没有物质什么都不存在，没有能量什么都不会发生，没有信息什么都没有意义。” </p>\n<p>尽管对“信息是什么？”的问题难有定论，但通过与物理学中定义的物质和能量相类比，科学家们恍然大悟：信息的概念如此混乱，可能是因为我们没有给它一个定量的描述。科学理论需要物理量的量化，量化后才能建立数学模型。如果我们能将‘信息’量化，问题可能就会好办多了！</p>\n<p>于是，在二十世纪40年代后期，一个年轻的科学家，后来被人誉为信息和数字通讯之父的香农，登上了科学技术的历史舞台。</p>\n<p>香农的两大贡献：一是信息理论、信息熵的概念；另一是符号逻辑和开关理论。香农的信息论为明确什么是信息量概念作出了决定性的贡献。感谢香农，在定量研究的科学领域中，他将原来模模糊糊的信息概念，天才地给以了量化，使我们大家在解数学问题时也能‘牛刀小试’。</p>\n<p>其实香农并不是给信息量化的第一人，巨人也得站在前人的肩膀上。1928年，哈特利（R.V. H. Harley）就曾建议用N log D这个量表示信息量。1949年，控制论创始人维纳将度量信息的概念引向热力学。1948年，香农认为，信息是对事物运动状态或存在方式的不确定性的描述。并把哈特利的公式扩大到概率ai不同的情况，得到信息量的公式：</p>\n<p><center>　<strong>H=∑-ai log ai</strong><br></center><br>如果计算中的对数log是以2为底的，那么计算出来的信息就以比特（bit）为单位。</p>\n<hr>\n<p>根据香农的信息概念，信息能消除不确定性，而我们在解决数学题的时候，也是要消除不确定性，得到确定的答案。并不仅仅是老鼠问题和称球问题如此，我认为大多数问题都多少是一个‘消除不确定性’的过程。因此，我们为何不借用香农的工具，研究研究我们的问题有多少不确定性呢？也就是说，需要多少信息量才能解决这个问题？另外，根据题目所限制的手段，最多能够得到多少信息量？有无可能完全解决这个问题？等等。</p>\n<p>具体到老鼠和毒药的问题。100瓶液体中1瓶有毒，每1瓶发生有毒的概率是1/100，这时候要确定毒药瓶所需的信息量H = -(p1logp1+p2logp2+….+p100logp100)。</p>\n<p>因为所有瓶子完全相同，这是一个等概率问题，p1 = p2 =…=p100 = 1/100。</p>\n<p>得到H=-log（1/100）。</p>\n<p>下面计算从老鼠能得到的信息量。</p>\n<p>首先考虑问题1，即给定时间为1天的情况。一天后，每只老鼠或死或活，因此，能够提供1比特的信息。7只老鼠则能提供7比特的信息。</p>\n<p>再看看刚才列出的确定毒药瓶所需的信息量H的公式：H=-log（1/100）&lt;  -log（1/128）= 7比特。</p>\n<p>因此，问题1应该可以解决。这个可能性是信息论提供给我们的。实际上，应该不仅仅是可能性，这种计算信息量比特数的方法能启发我们的思维。在解题时，学习别人解题的方法固然重要，而探讨别人是如何想到这种方法的，可能更为重要。在《大将军数学题2》的讨论中，就有博友说，如果提到2进制，此题就容易了。的确如此，如果不想到2进制，对此题往往好像有点束手无策，不知如何下手。</p>\n<hr>\n<p>我们再来讨论问题2。</p>\n<p>所需要的信息量H的计算是和问题1一样的。然而，从每只老鼠能得到的信息量的计算，却可能会有所不同。这儿我用了‘可能’两个字，是因为我们还丝毫未曾谈及如何解决这个问题2。</p>\n<p>问题2和问题1的差别是在于老鼠可以参加接连两次实验。问题1中，只能做一次实验时，老鼠有两种状态：死或活。因此它可利用的信息量是1比特。如果能做两次实验，两次实验中都有生死的可能性，仅就逻辑而言，老鼠有四种可能情况：生生、生死、死生、死死。但其中的第三种情形：死生，是不可能发生的，因为在第一天的实验中死了的老鼠，不可能在第二次实验后又活过来。所以我们要将第一天实验中死了的老鼠，排除在第二次实验之外。所以，对问题2，老鼠有3种状态，每种状态的概率为1/3，因此，从一只老鼠得到的信息量</p>\n<p>S=-（1/3log（1/3）+ 1/3log（1/3）+ 1/3log（1/3））= log（3）。</p>\n<p>如果将这儿的对数取以3为底的话，可以说成，每只老鼠能得到的信息量是一个3进制位（trit）。</p>\n<p>多少只老鼠才能使总信息量大于log（100）呢？</p>\n<p>解方程：k*log(3)&gt;log(100)  =&gt;  3**k&gt;100，可得到k&gt;=5。</p>\n<p>因此，至少要5只老鼠，这便是问题2的解。</p>\n<hr>\n<p>但是无论如何，5只老鼠到底能否判定出有毒的瓶子，还需我们想出具体检验的方案才成定论。</p>\n<p>因此，我们继续思考问题3（问题2的延伸）：在能做两次实验的条件下，如何找出有毒的瓶子？</p>\n<p>沿着刚才信息量计算的思路，问题1最优答案用2进制有关的实验方法得到；问题2中估计老鼠数目的下界时，用到了3进制。那么，在能做两次实验的条件下，找出有毒的瓶子的最佳方案是否与3进制有关？</p>\n<p>试试看吧。首先，将瓶子的号码转换成5位的3进制。为什么是5？5只老鼠？对，由于同样的原因，最大的号码100需要用‘5位的3进制’来表示。这100个5位3进制码列表如下：</p>\n<p>00000，<br>00001，<br>00002，<br>00010，<br>00011，<br>00012，<br>00020，<br>00021，<br>00022，<br>…………<br>10201</p>\n<p>然后，第一次实验：<br>从左到右：让第1只老鼠喝所有3进制码第1位是2的瓶子中的水；让第2只老鼠喝所有3进制码第2位是2的瓶子中的水；以此类推下去。这样，每个老鼠第二天的死活情况就决定了毒水瓶子3进制码这一位的数字是不是2：老鼠死，2；老鼠活，1或0。</p>\n<p>第一次实验中死去的老鼠没有白死，它的死决定了毒水瓶3进制码的这位数字是2！虽然这个老鼠为2而牺牲了，但很幸运，这一位的数字也被决定了，我们也不再需要这只老鼠。嘿嘿，我们让这个老鼠作出了它的最大贡献，要不然，就不是最优化的方案了。</p>\n<p>第一次实验中没死的老鼠也没有白白地冒险，也为我们提供了信息：毒水瓶子3进制码的这一位的数字肯定不是2！所以，我们可以将3进制码这位是2的瓶子去除，因为它们肯定无毒。然后……</p>\n<p>第二次实验：<br>让没死的老鼠喝下所有3进制码的该位数字为1的瓶子中的水。这个老鼠一天后的死活情况便决定了毒水瓶子3进制码这一位的数字是1还是0：老鼠死，1；老鼠活，0。</p>\n<hr>\n<p>这个问题可以此类推地扩展成更一般的问题：假设有n个瓶子，其中1个瓶子中的水有毒，实验的小白鼠喝了毒水1天后死去，给你i天的时间，k只老鼠。问n的最大值是多少？如何实验，才能检测出毒水瓶来。</p>\n<p>答案：有i天的时间，你可以做i次试验，因为死了的老鼠不能继续试验，i次试验后，老鼠总共的可能状态有（i+1）个：</p>\n<p>第1次就死去、第2次死、第3次死、……、第i次死、一直活着。</p>\n<p>能检测的最多水瓶数n=(i+1)**k。检测方法：将所有瓶子用k位的(i+1)进制数编码，然后，遵循上面所述i=2类似的过程，i天之后，根据k个老鼠的状态，可以确定毒水瓶的(i+1)进制数值。</p>\n<p><br><br>通过用信息论解老鼠喝毒药的这个简单练脑题，说明科学思维方法之重要性。</p>\n","categories":["others"],"tags":["others"]},{"title":"Arduino初学（2）","url":"http://yoursite.com/2018/05/14/Arduino初学（2）/","content":"<p>这一次我们来学习单个数码管的使用<br><br><br><img src=\"/2018/05/14/Arduino初学（2）/Arduino-2-2.jpg\" alt=\"\"><br><br><br>数码管的原理图如上所示。数码管本质是8个LED的并联，各LED阳极或阴极共用一个管脚，分为共阳/共阴二极管（外观相同，需要用万用表测量来区别）。用时想点亮哪个二极管，就在引脚和公共脚加电压即可。<br><br><br><img src=\"/2018/05/14/Arduino初学（2）/Arduino-2-4.jpg\" alt=\"\"><br>本次我们将试着点亮二极管并让其按顺序显示1-F.接线图如下<br><br><br>可以看出接线还是十分简单的（就是引脚有点多orz）<br><br><br>接好后我们与电脑连接，运行程序即可。<br><br><br>程序代码如下</p>\n<pre><code>#define D_a 2  //数码管a 接引脚 2\n#define D_b 3\n#define D_c 4\n#define D_d 5\n#define D_e 6\n#define D_f 7\n#define D_g 8\n#define D_h 9\n\n//数码管0-F数字码值\nunsigned char num[17][8] =\n{\n //1为点亮，0为关闭，a表示数码管a的led灯，其他类似\n //a  b  c  d  e  f  g  h \n  {1, 1, 1, 1, 1, 1, 0, 0},      //0\n  {0, 1, 1, 0, 0, 0, 0, 0},     //1\n  {1, 1, 0, 1, 1, 0, 1, 0},     //2\n  {1, 1, 1, 1, 0, 0, 1, 0},     //3\n  {0, 1, 1, 0, 0, 1, 1, 0},     //4\n  {1, 0, 1, 1, 0, 1, 1, 0},     //5\n  {1, 0, 1, 1, 1, 1, 1, 0},     //6\n  {1, 1, 1, 0, 0, 0, 0, 0},     //7\n  {1, 1, 1, 1, 1, 1, 1, 0},     //8\n  {1, 1, 1, 1, 0, 1, 1, 0},     //9\n  {1, 1, 1, 0, 1, 1, 1, 1},     //A\n  {1, 1, 1, 1, 1, 1, 1, 1},     //B\n  {1, 0, 0, 1, 1, 1, 0, 1},     //C\n  {1, 1, 1, 1, 1, 1, 0, 1},     //D\n  {1, 0, 0, 1, 1, 1, 1, 1},     //E\n  {1, 0, 0, 0, 1, 1, 1, 1},     //F\n  {0, 0, 0, 0, 0, 0, 0, 1},     //.\n};\n\nvoid setup()\n{\n  pinMode(D_a,OUTPUT);        //设置引脚为输出\n  pinMode(D_b,OUTPUT);        //设置引脚为输出\n  pinMode(D_c,OUTPUT);        //设置引脚为输出\n  pinMode(D_d,OUTPUT);        //设置引脚为输出\n  pinMode(D_e,OUTPUT);        //设置引脚为输出\n  pinMode(D_f,OUTPUT);        //设置引脚为输出\n  pinMode(D_g,OUTPUT);        //设置引脚为输出\n  pinMode(D_h,OUTPUT);        //设置引脚为输出\n}\n\nvoid loop()\n{\n  //按顺序显示0123456789ABCDEF.\n  for( int i = 0 ; i &lt; 17 ; i++)        //循环显示0-9 \n  {\n    digitalWrite(D_a,num[i][0]);  //设置a 引脚的电平\n    digitalWrite(D_b,num[i][1]);  //设置b 引脚的电平\n    digitalWrite(D_c,num[i][2]);  //设置c 引脚的电平\n    digitalWrite(D_d,num[i][3]);  //设置d 引脚的电平\n    digitalWrite(D_e,num[i][4]);  //设置e 引脚的电平\n    digitalWrite(D_f,num[i][5]);  //设置f 引脚的电平\n    digitalWrite(D_g,num[i][6]);  //设置g 引脚的电平\n    digitalWrite(D_h,num[i][7]);  //设置h 引脚的电平\n\n    delay(1000);            //延迟1秒\n  }\n}\n</code></pre><p>可以看出程序没有什么难处，通过预先设置在不同数字及字母各LED对应的开闭状态，来循环输出<br><br><br>那么本篇博文就到这里（这很明显是偷懒啊orz你明明是phase3卡住了吧……)</p>\n","categories":["Arduino"],"tags":["Arduino"]},{"title":"bomb-二进制炸弹解密（3）","url":"http://yoursite.com/2018/05/14/bomb-二进制炸弹解密（3）/","content":"<blockquote>\n<p>对本系列感兴趣的小伙伴们可以翻看往期博文</p>\n</blockquote>\n<p>这一篇文章我们来讲一讲第三个“炸弹”的拆解<br><br><br>照例，我们来看一下phase3函数<br>     08048b86 &lt;phase_3&gt;:<br>     8048b86:    55                       push   %ebp<br>     8048b87:    89 e5                    mov    %esp,%ebp<br>     8048b89:    83 ec 18                 sub    $0x18,%esp<br>     8048b8c:    8d 45 f8                 lea    -0x8(%ebp),%eax<br>     8048b8f:    50                       push   %eax<br>     8048b90:    8d 45 fc                 lea    -0x4(%ebp),%eax<br>     8048b93:    50                       push   %eax<br>     8048b94:    68 68 99 04 08           push   $0x8049968<br>     8048b99:    ff 75 08                 pushl  0x8(%ebp)<br>     8048b9c:    e8 d7 fc ff ff           call   8048878 &lt;sscanf@plt&gt;<br>     8048ba1:    83 c4 10                 add    $0x10,%esp<br>     8048ba4:    83 f8 01                 cmp    $0x1,%eax<br>     8048ba7:    7f 05                    jg     8048bae &lt;phase_3+0x28&gt;<br>     8048ba9:    e8 3e 08 00 00           call   80493ec &lt;explode_bomb&gt;<br>     8048bae:    83 7d fc 07              cmpl   $0x7,-0x4(%ebp)<br>     8048bb2:    77 65                    ja     8048c19 &lt;phase_3+0x93&gt;<br>     8048bb4:    8b 45 fc                 mov    -0x4(%ebp),%eax<br>     8048bb7:    ff 24 85 cc 96 04 08     jmp    *0x80496cc(,%eax,4)<br>     8048bbe:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bc3:    eb 4d                    jmp    8048c12 &lt;phase_3+0x8c&gt;<br>     8048bc5:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bca:    eb 41                    jmp    8048c0d &lt;phase_3+0x87&gt;<br>     8048bcc:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bd1:    eb 35                    jmp    8048c08 &lt;phase_3+0x82&gt;<br>     8048bd3:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bd8:    eb 29                    jmp    8048c03 &lt;phase_3+0x7d&gt;<br>     8048bda:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bdf:    eb 1d                    jmp    8048bfe &lt;phase_3+0x78&gt;<br>     8048be1:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048be6:    eb 11                    jmp    8048bf9 &lt;phase_3+0x73&gt;<br>     8048be8:    b8 59 03 00 00           mov    $0x359,%eax<br>     8048bed:    eb 05                    jmp    8048bf4 &lt;phase_3+0x6e&gt;<br>     8048bef:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bf4:    2d df 01 00 00           sub    $0x1df,%eax<br>     8048bf9:    05 bd 02 00 00           add    $0x2bd,%eax<br>     8048bfe:    2d db 02 00 00           sub    $0x2db,%eax<br>     8048c03:    05 f2 00 00 00           add    $0xf2,%eax<br>     8048c08:    2d 86 00 00 00           sub    $0x86,%eax<br>     8048c0d:    05 86 00 00 00           add    $0x86,%eax<br>     8048c12:    2d 9b 01 00 00           sub    $0x19b,%eax<br>     8048c17:    eb 0a                    jmp    8048c23 &lt;phase_3+0x9d&gt;<br>     8048c19:    e8 ce 07 00 00           call   80493ec &lt;explode_bomb&gt;<br>     8048c1e:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048c23:    83 7d fc 05              cmpl   $0x5,-0x4(%ebp)<br>     8048c27:    7f 05                    jg     8048c2e &lt;phase_3+0xa8&gt;<br>     8048c29:    3b 45 f8                 cmp    -0x8(%ebp),%eax<br>     8048c2c:    74 05                    je     8048c33 &lt;phase_3+0xad&gt;<br>     8048c2e:    e8 b9 07 00 00           call   80493ec &lt;explode_bomb&gt;<br>     8048c33:    c9                       leave<br>     8048c34:    c3                       ret    </p>\n","categories":["汇编"],"tags":["汇编"]},{"title":"bomb-二进制炸弹解密（2）","url":"http://yoursite.com/2018/05/13/bomb-二进制炸弹解密（2）/","content":"<blockquote>\n<p>第一篇可查阅往期博文</p>\n</blockquote>\n<p> 这一篇文章将讲诉第二个“炸弹”的拆解。<br><br><br>首先我们先来看一下phase2函数</p>\n<pre><code> 08048b3d &lt;phase_2&gt;:\n 8048b3d:    55                       push   %ebp\n 8048b3e:    89 e5                    mov    %esp,%ebp\n 8048b40:    56                       push   %esi\n 8048b41:    53                       push   %ebx\n 8048b42:    83 ec 28                 sub    $0x28,%esp\n\n 8048b45:    8d 45 e0                 lea    -0x20(%ebp),%eax\n 8048b48:    50                       push   %eax\n 8048b49:    ff 75 08                 pushl  0x8(%ebp)\n 8048b4c:    e8 84 03 00 00           call   8048ed5 &lt;read_six_numbers&gt;\n 8048b51:    83 c4 10                 add    $0x10,%esp\n\n8048b54:    83 7d e0 01              cmpl   $0x1,-0x20(%ebp)\n 8048b58:    74 05                    je     8048b5f &lt;phase_2+0x22&gt;\n 8048b5a:    e8 8d 08 00 00           call   80493ec &lt;explode_bomb&gt;\n\n 8048b5f:    bb 02 00 00 00           mov    $0x2,%ebx\n 8048b64:    8d 75 e0                 lea    -0x20(%ebp),%esi\n 8048b67:    89 d8                    mov    %ebx,%eax\n 8048b69:    0f af 44 9e f8           imul   -0x8(%esi,%ebx,4),%eax\n 8048b6e:    3b 44 9e fc              cmp    -0x4(%esi,%ebx,4),%eax\n 8048b72:    74 05                    je     8048b79 &lt;phase_2+0x3c&gt;\n 8048b74:    e8 73 08 00 00           call   80493ec &lt;explode_bomb&gt;    \n 8048b79:    43                       inc    %ebx\n 8048b7a:    83 fb 07                 cmp    $0x7,%ebx\n 8048b7d:    75 e8                    jne    8048b67 &lt;phase_2+0x2a&gt;\n\n 8048b7f:    8d 65 f8                 lea    -0x8(%ebp),%esp    \n 8048b82:    5b                       pop    %ebx\n 8048b83:    5e                       pop    %esi\n 8048b84:    c9                       leave  \n 8048b85:    c3                       ret    \n</code></pre><p>第一部分很明显是函数初始化的过程，跳过，看第二部分。<br><br><br>第二部分的主要操作为</p>\n<blockquote>\n<p>将%ebp-0X20地址中的值赋给%eax</p>\n</blockquote>\n<blockquote>\n<p>调用read_six_numbers这个函数，参数为%eax和%ebp+0X8。最后执行%esp+0X10</p>\n</blockquote>\n<p>第三部分的主要操作为</p>\n<blockquote>\n<p>比较0X1和%ebp-0X20中的数据是否相同，若相同则跳至8048b5f，否则就调用 explode_bomb函数（炸弹爆炸，GG）</p>\n</blockquote>\n<p>接下来我们来看第四部分</p>\n<blockquote>\n<p>首先将0X2赋给%ebx，将%ebp-0X20的数据赋给%esi，将%ebx中的值赋给%eax。<br>然后再执行%eax=%eax<em>（%esi+%ebx</em>4-8）<br>比较%esi+%ebx*4-0X4与%eax，若不相同则调用explode_bomb（再次GG），<br>若相同则%ebx += 1，并且判断%ebx是否小于0X7，若小于则回到8048b67</p>\n</blockquote>\n<p>第五部分则是函数结束过程,不需要分析<br><br><br><br><br>根据上面的分析我们可以初步得到密码的结构，首先是一个六位数！（废话），其次应该是以1开头（因为对比了%ebp-0X20，即%eax与0X1是否相同。<br><br><br>接下来我们进一步分析。第四部分第一次循环开始时%eax=0X1,%ebx=0X2,%esi=0X1.随后</p>\n<blockquote>\n<p>%eax = %ebx = 2</p>\n</blockquote>\n<blockquote>\n<p>%eax = %eax<em>（%esi+%ebx</em>4-0X8）<br>比较%eax与%esi+%ebx*4-0X4中的数据</p>\n</blockquote>\n<p>这里我们可以发现前后两次比较的数据仅相差4位，即一个整数的大小，猜测是密码中相邻的数字，因此密码满足的条件应该为：A[n]=A[n-1]*n。而A[1]=1，n&lt;6,因此可得A[1]=1;A[2]=2;A[3]=6;A[4]=24;A[5]=120;A[6]=720.<br><br><br>运行，发现程序正确，炸弹2顺利拆除（鼓掌2333）</p>\n","categories":["汇编"],"tags":["汇编"]},{"title":"bomb_二进制炸弹解密（1）","url":"http://yoursite.com/2018/05/12/bomb-二进制炸弹解密（1）/","content":"<blockquote>\n<p><a href=\"http://files.cnblogs.com/remlostime/bomb.zip\" target=\"_blank\" rel=\"noopener\">本系列文章所用文件下载地址</a></p>\n</blockquote>\n<blockquote>\n<p>操作环境:任意lunix系统&nbsp;  主要操作工具：gdb<br><br></p>\n</blockquote>\n<p>&nbsp; 首先将文件在lunix环境下解压，双击bomb查看是否运行，此时系统会提示没有合适的软件来打开，这就说明我们不能通过直接双击运行的方式来查看如何”拆弹”。<br><br><br>&nbsp; 接下来按照提示，我们通过”objdump -d”命令查看”bomb”文件内容，可以看到终端将bomb文件的所有反汇编代码输出，翻看可知其中的phase1-6函数应该是对应的6个炸弹，若想拆弹应破解相应函数，本篇文章将讲述如何拆除phase1<br><br><br><img src=\"/2018/05/12/bomb-二进制炸弹解密（1）/bomb-1-1.jpg\" alt=\"\"><br><br><br>&nbsp; phase1函数的反汇编代码如上图，可以看出phase1还是hin简单的orz接下来我们来分析一下代码。<br><br><br>    push %ebp<br>    mov  %esp,%ebp<br>    sub  $0X10,%esp<br>这段代码是常见的函数初始化过程<br><br><br>    push  $0X8049678<br>    pushl 0X8(%ebb)<br>    call  8048f2f&lt;strings_not_equal&gt;<br>这是&lt;strings_not_equal&gt;这个函数的调用过程，传入了0X8049678和0X8（%ebb）这两个地址的参数.<br><br><br>    add  $0X10,%esp<br>    test %eax,%eax<br>    je   8048b3b&lt;phase_1+0X1f&gt;<br>    call 80493ec&lt;explode_bomb&gt;<br>    leave<br>    ret</p>\n<p>test指令检测eax寄存器，并且je指令判断结果，以决定是跳至8048b3b leave还是调用&lt;explode_bomb&gt;函数。<br><br><br>&nbsp; 分析了整个phase1函数后我们发现，整个phase1函数的关键点在于0X8049678这个地址存储的数据，然而如何找出呢，这时候就要用到gdb这个调试工具了。<br><br><br>&nbsp; 首先我们在终端中打开gdb,然后通过</p>\n<blockquote>\n<p>(gdb) file bomb</p>\n</blockquote>\n<p>在gdb中打开bomb文件<br><br><br>随后我们通过</p>\n<blockquote>\n<p>(gdb) p 0X8049678</p>\n</blockquote>\n<p>这个指令打印8049678地址存储的数据。然而我们却发现打印出的数据是一段看起来毫无意义的数字。<br><br><br>我们再通过</p>\n<blockquote>\n<p>(gdb) p(char *)0X8049678</p>\n</blockquote>\n<p>将其转换成字符串打印。结果为：<br><img src=\"/2018/05/12/bomb-二进制炸弹解密（1）/bomb-1-2.png\" alt=\"\"><br><br><br>至此，我们就解开了第一个炸弹。</p>\n","categories":["汇编"],"tags":["汇编"]},{"title":"Arduino初学（1）","url":"http://yoursite.com/2018/05/12/Ardunio初学（1）/","content":"<blockquote>\n<p>上一篇blog说要保持一天一更，也许应该是指到次日的两点前吧（笑）</p>\n</blockquote>\n<blockquote>\n<p>初次接触Ardunio，打算做一个流水灯，结果好像也不是很顺利啊orz</p>\n</blockquote>\n<p><strong>第一次尝试</strong></p>\n<p>从学校的仓库借到了全套的开发套件了lol，但拖到晚上才开始正式的调试<br><br>按照网上的图示安装好了电路，烧进了程序，但是当我满怀信心的打开程序时却什么都没发生orz<br><br><br><img src=\"/2018/05/12/Ardunio初学（1）/Ardunio-1-1.jpg\" alt=\"\"><br><br><br>初始电路板如图</p>\n<p><strong>改正过程</strong></p>\n<p>根据网上的接线图进行对比后<br><br><img src=\"/2018/05/12/Ardunio初学（1）/Ardunio-1-2.png\" alt=\"\"></p>\n<p>博主突然发现，led的接脚接反了有没有……<br><br><br>于是只好拔了重接orz，最后历经长达<strong>半小时</strong>之久，终于点亮了人生中第一个LED灯2333<br><br><br><em>附代码</em></p>\n<pre><code>void setup() \n{\n  // 初始化I/O口\n  for(int i=2;i&lt;8;i++)\n    pinMode(i,OUTPUT);\n}\n\nvoid loop() \n{\n  // 从引脚2到引脚6，逐个点亮LED，等待1秒再熄灭LED\n  for(int i=2;i&lt;7;i++)\n  {\n    digitalWrite(i,HIGH);\n    delay(1000);\n    digitalWrite(i,LOW);   \n  }\n  // 从引脚7到引脚3，逐个点亮LED，等待1秒再熄灭LED\n  for(int i=7;i&gt;2;i--)\n  {\n    digitalWrite(i,HIGH);\n    delay(1000);\n    digitalWrite(i,LOW);   \n  } \n}\n</code></pre>","categories":["Arduino"],"tags":["Arduino"]},{"title":"第一篇博客","url":"http://yoursite.com/2018/05/10/a-new-blog/","content":" <center>MY FIRST BLOG</center>\n\n\n<blockquote>\n<p>终于下定决心开始写博客了2333</p>\n</blockquote>\n<blockquote>\n<p>打算给自己定一些目标，希望能够实现orz</p>\n</blockquote>\n<center><br><br><br><strong>1. CTF基础入门<br></strong><br><strong>2. lunix入门<br></strong><br><strong>3. 汇编语言入门<br></strong><br><strong>4. ardunio，树莓派入门<br></strong><br></center>\n\n\n<blockquote>\n<p>希望能够实现吧2333，以后保持每天都更新博客</p>\n</blockquote>\n<blockquote>\n<p>用来防止自己偷懒orz</p>\n</blockquote>\n","categories":["日常随笔"],"tags":["随笔"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]