[{"title":"Arduino初学（2）","url":"http://yoursite.com/2018/05/14/Arduino初学（2）/","content":"<p>这一次我们来学习单个数码管的使用<br><br><br><img src=\"/2018/05/14/Arduino初学（2）/Arduino-2-2.jpg\" alt=\"\"><br><br><br>数码管的原理图如上所示。数码管本质是8个LED的并联，各LED阳极或阴极共用一个管脚，分为共阳/共阴二极管（外观相同，需要用万用表测量来区别）。用时想点亮哪个二极管，就在引脚和公共脚加电压即可。<br><br><br>本次我们将试着点亮二极管并让其按顺序显示1-F.接线图如下<br><img src=\"/2018/05/14/Arduino初学（2）/Arduion初学（2）/Arduino-2-3.jpg\" alt=\"\"><br><br><br>可以看出接线还是十分简单的（就是引脚有点多orz）<br><br><br>接好后我们与电脑连接，运行程序即可。<br><br><br>程序代码如下</p>\n<pre><code>#define D_a 2  //数码管a 接引脚 2\n#define D_b 3\n#define D_c 4\n#define D_d 5\n#define D_e 6\n#define D_f 7\n#define D_g 8\n#define D_h 9\n\n//数码管0-F数字码值\nunsigned char num[17][8] =\n{\n //1为点亮，0为关闭，a表示数码管a的led灯，其他类似\n //a  b  c  d  e  f  g  h \n  {1, 1, 1, 1, 1, 1, 0, 0},      //0\n  {0, 1, 1, 0, 0, 0, 0, 0},     //1\n  {1, 1, 0, 1, 1, 0, 1, 0},     //2\n  {1, 1, 1, 1, 0, 0, 1, 0},     //3\n  {0, 1, 1, 0, 0, 1, 1, 0},     //4\n  {1, 0, 1, 1, 0, 1, 1, 0},     //5\n  {1, 0, 1, 1, 1, 1, 1, 0},     //6\n  {1, 1, 1, 0, 0, 0, 0, 0},     //7\n  {1, 1, 1, 1, 1, 1, 1, 0},     //8\n  {1, 1, 1, 1, 0, 1, 1, 0},     //9\n  {1, 1, 1, 0, 1, 1, 1, 1},     //A\n  {1, 1, 1, 1, 1, 1, 1, 1},     //B\n  {1, 0, 0, 1, 1, 1, 0, 1},     //C\n  {1, 1, 1, 1, 1, 1, 0, 1},     //D\n  {1, 0, 0, 1, 1, 1, 1, 1},     //E\n  {1, 0, 0, 0, 1, 1, 1, 1},     //F\n  {0, 0, 0, 0, 0, 0, 0, 1},     //.\n};\n\nvoid setup()\n{\n  pinMode(D_a,OUTPUT);        //设置引脚为输出\n  pinMode(D_b,OUTPUT);        //设置引脚为输出\n  pinMode(D_c,OUTPUT);        //设置引脚为输出\n  pinMode(D_d,OUTPUT);        //设置引脚为输出\n  pinMode(D_e,OUTPUT);        //设置引脚为输出\n  pinMode(D_f,OUTPUT);        //设置引脚为输出\n  pinMode(D_g,OUTPUT);        //设置引脚为输出\n  pinMode(D_h,OUTPUT);        //设置引脚为输出\n}\n\nvoid loop()\n{\n  //按顺序显示0123456789ABCDEF.\n  for( int i = 0 ; i &lt; 17 ; i++)        //循环显示0-9 \n  {\n    digitalWrite(D_a,num[i][0]);  //设置a 引脚的电平\n    digitalWrite(D_b,num[i][1]);  //设置b 引脚的电平\n    digitalWrite(D_c,num[i][2]);  //设置c 引脚的电平\n    digitalWrite(D_d,num[i][3]);  //设置d 引脚的电平\n    digitalWrite(D_e,num[i][4]);  //设置e 引脚的电平\n    digitalWrite(D_f,num[i][5]);  //设置f 引脚的电平\n    digitalWrite(D_g,num[i][6]);  //设置g 引脚的电平\n    digitalWrite(D_h,num[i][7]);  //设置h 引脚的电平\n\n    delay(1000);            //延迟1秒\n  }\n}\n</code></pre><p>可以看出程序没有什么难处，通过预先设置在不同数字及字母各LED对应的开闭状态，来循环输出<br><br><br>那么本篇博文就到这里（这很明显是偷懒啊orz你明明是phase3卡住了吧……)</p>\n","categories":["Arduino"],"tags":["Arduino"]},{"title":"bomb-二进制炸弹解密（3）","url":"http://yoursite.com/2018/05/14/bomb-二进制炸弹解密（3）/","content":"<blockquote>\n<p>对本系列感兴趣的小伙伴们可以翻看往期博文</p>\n</blockquote>\n<p>这一篇文章我们来讲一讲第三个“炸弹”的拆解<br><br><br>照例，我们来看一下phase3函数<br>     08048b86 &lt;phase_3&gt;:<br>     8048b86:    55                       push   %ebp<br>     8048b87:    89 e5                    mov    %esp,%ebp<br>     8048b89:    83 ec 18                 sub    $0x18,%esp<br>     8048b8c:    8d 45 f8                 lea    -0x8(%ebp),%eax<br>     8048b8f:    50                       push   %eax<br>     8048b90:    8d 45 fc                 lea    -0x4(%ebp),%eax<br>     8048b93:    50                       push   %eax<br>     8048b94:    68 68 99 04 08           push   $0x8049968<br>     8048b99:    ff 75 08                 pushl  0x8(%ebp)<br>     8048b9c:    e8 d7 fc ff ff           call   8048878 &lt;sscanf@plt&gt;<br>     8048ba1:    83 c4 10                 add    $0x10,%esp<br>     8048ba4:    83 f8 01                 cmp    $0x1,%eax<br>     8048ba7:    7f 05                    jg     8048bae &lt;phase_3+0x28&gt;<br>     8048ba9:    e8 3e 08 00 00           call   80493ec &lt;explode_bomb&gt;<br>     8048bae:    83 7d fc 07              cmpl   $0x7,-0x4(%ebp)<br>     8048bb2:    77 65                    ja     8048c19 &lt;phase_3+0x93&gt;<br>     8048bb4:    8b 45 fc                 mov    -0x4(%ebp),%eax<br>     8048bb7:    ff 24 85 cc 96 04 08     jmp    *0x80496cc(,%eax,4)<br>     8048bbe:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bc3:    eb 4d                    jmp    8048c12 &lt;phase_3+0x8c&gt;<br>     8048bc5:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bca:    eb 41                    jmp    8048c0d &lt;phase_3+0x87&gt;<br>     8048bcc:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bd1:    eb 35                    jmp    8048c08 &lt;phase_3+0x82&gt;<br>     8048bd3:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bd8:    eb 29                    jmp    8048c03 &lt;phase_3+0x7d&gt;<br>     8048bda:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bdf:    eb 1d                    jmp    8048bfe &lt;phase_3+0x78&gt;<br>     8048be1:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048be6:    eb 11                    jmp    8048bf9 &lt;phase_3+0x73&gt;<br>     8048be8:    b8 59 03 00 00           mov    $0x359,%eax<br>     8048bed:    eb 05                    jmp    8048bf4 &lt;phase_3+0x6e&gt;<br>     8048bef:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048bf4:    2d df 01 00 00           sub    $0x1df,%eax<br>     8048bf9:    05 bd 02 00 00           add    $0x2bd,%eax<br>     8048bfe:    2d db 02 00 00           sub    $0x2db,%eax<br>     8048c03:    05 f2 00 00 00           add    $0xf2,%eax<br>     8048c08:    2d 86 00 00 00           sub    $0x86,%eax<br>     8048c0d:    05 86 00 00 00           add    $0x86,%eax<br>     8048c12:    2d 9b 01 00 00           sub    $0x19b,%eax<br>     8048c17:    eb 0a                    jmp    8048c23 &lt;phase_3+0x9d&gt;<br>     8048c19:    e8 ce 07 00 00           call   80493ec &lt;explode_bomb&gt;<br>     8048c1e:    b8 00 00 00 00           mov    $0x0,%eax<br>     8048c23:    83 7d fc 05              cmpl   $0x5,-0x4(%ebp)<br>     8048c27:    7f 05                    jg     8048c2e &lt;phase_3+0xa8&gt;<br>     8048c29:    3b 45 f8                 cmp    -0x8(%ebp),%eax<br>     8048c2c:    74 05                    je     8048c33 &lt;phase_3+0xad&gt;<br>     8048c2e:    e8 b9 07 00 00           call   80493ec &lt;explode_bomb&gt;<br>     8048c33:    c9                       leave<br>     8048c34:    c3                       ret    </p>\n","categories":["汇编"],"tags":["汇编"]},{"title":"bomb-二进制炸弹解密（2）","url":"http://yoursite.com/2018/05/13/bomb-二进制炸弹解密（2）/","content":"<blockquote>\n<p>第一篇可查阅往期博文</p>\n</blockquote>\n<p> 这一篇文章将讲诉第二个“炸弹”的拆解。<br><br><br>首先我们先来看一下phase2函数</p>\n<pre><code> 08048b3d &lt;phase_2&gt;:\n 8048b3d:    55                       push   %ebp\n 8048b3e:    89 e5                    mov    %esp,%ebp\n 8048b40:    56                       push   %esi\n 8048b41:    53                       push   %ebx\n 8048b42:    83 ec 28                 sub    $0x28,%esp\n\n 8048b45:    8d 45 e0                 lea    -0x20(%ebp),%eax\n 8048b48:    50                       push   %eax\n 8048b49:    ff 75 08                 pushl  0x8(%ebp)\n 8048b4c:    e8 84 03 00 00           call   8048ed5 &lt;read_six_numbers&gt;\n 8048b51:    83 c4 10                 add    $0x10,%esp\n\n8048b54:    83 7d e0 01              cmpl   $0x1,-0x20(%ebp)\n 8048b58:    74 05                    je     8048b5f &lt;phase_2+0x22&gt;\n 8048b5a:    e8 8d 08 00 00           call   80493ec &lt;explode_bomb&gt;\n\n 8048b5f:    bb 02 00 00 00           mov    $0x2,%ebx\n 8048b64:    8d 75 e0                 lea    -0x20(%ebp),%esi\n 8048b67:    89 d8                    mov    %ebx,%eax\n 8048b69:    0f af 44 9e f8           imul   -0x8(%esi,%ebx,4),%eax\n 8048b6e:    3b 44 9e fc              cmp    -0x4(%esi,%ebx,4),%eax\n 8048b72:    74 05                    je     8048b79 &lt;phase_2+0x3c&gt;\n 8048b74:    e8 73 08 00 00           call   80493ec &lt;explode_bomb&gt;    \n 8048b79:    43                       inc    %ebx\n 8048b7a:    83 fb 07                 cmp    $0x7,%ebx\n 8048b7d:    75 e8                    jne    8048b67 &lt;phase_2+0x2a&gt;\n\n 8048b7f:    8d 65 f8                 lea    -0x8(%ebp),%esp    \n 8048b82:    5b                       pop    %ebx\n 8048b83:    5e                       pop    %esi\n 8048b84:    c9                       leave  \n 8048b85:    c3                       ret    \n</code></pre><p>第一部分很明显是函数初始化的过程，跳过，看第二部分。<br><br><br>第二部分的主要操作为</p>\n<blockquote>\n<p>将%ebp-0X20地址中的值赋给%eax</p>\n</blockquote>\n<blockquote>\n<p>调用read_six_numbers这个函数，参数为%eax和%ebp+0X8。最后执行%esp+0X10</p>\n</blockquote>\n<p>第三部分的主要操作为</p>\n<blockquote>\n<p>比较0X1和%ebp-0X20中的数据是否相同，若相同则跳至8048b5f，否则就调用 explode_bomb函数（炸弹爆炸，GG）</p>\n</blockquote>\n<p>接下来我们来看第四部分</p>\n<blockquote>\n<p>首先将0X2赋给%ebx，将%ebp-0X20的数据赋给%esi，将%ebx中的值赋给%eax。<br>然后再执行%eax=%eax<em>（%esi+%ebx</em>4-8）<br>比较%esi+%ebx*4-0X4与%eax，若不相同则调用explode_bomb（再次GG），<br>若相同则%ebx += 1，并且判断%ebx是否小于0X7，若小于则回到8048b67</p>\n</blockquote>\n<p>第五部分则是函数结束过程,不需要分析<br><br><br><br><br>根据上面的分析我们可以初步得到密码的结构，首先是一个六位数！（废话），其次应该是以1开头（因为对比了%ebp-0X20，即%eax与0X1是否相同。<br><br><br>接下来我们进一步分析。第四部分第一次循环开始时%eax=0X1,%ebx=0X2,%esi=0X1.随后</p>\n<blockquote>\n<p>%eax = %ebx = 2</p>\n</blockquote>\n<blockquote>\n<p>%eax = %eax<em>（%esi+%ebx</em>4-0X8）<br>比较%eax与%esi+%ebx*4-0X4中的数据</p>\n</blockquote>\n<p>这里我们可以发现前后两次比较的数据仅相差4位，即一个整数的大小，猜测是密码中相邻的数字，因此密码满足的条件应该为：A[n]=A[n-1]*n。而A[1]=1，n&lt;6,因此可得A[1]=1;A[2]=2;A[3]=6;A[4]=24;A[5]=120;A[6]=720.<br><br><br>运行，发现程序正确，炸弹2顺利拆除（鼓掌2333）</p>\n","categories":["汇编"],"tags":["汇编"]},{"title":"bomb_二进制炸弹解密（1）","url":"http://yoursite.com/2018/05/12/bomb-二进制炸弹解密（1）/","content":"<blockquote>\n<p><a href=\"http://files.cnblogs.com/remlostime/bomb.zip\" target=\"_blank\" rel=\"noopener\">本系列文章所用文件下载地址</a></p>\n</blockquote>\n<blockquote>\n<p>操作环境:任意lunix系统&nbsp;  主要操作工具：gdb<br><br></p>\n</blockquote>\n<p>&nbsp; 首先将文件在lunix环境下解压，双击bomb查看是否运行，此时系统会提示没有合适的软件来打开，这就说明我们不能通过直接双击运行的方式来查看如何”拆弹”。<br><br><br>&nbsp; 接下来按照提示，我们通过”objdump -d”命令查看”bomb”文件内容，可以看到终端将bomb文件的所有反汇编代码输出，翻看可知其中的phase1-6函数应该是对应的6个炸弹，若想拆弹应破解相应函数，本篇文章将讲述如何拆除phase1<br><br><br><img src=\"/2018/05/12/bomb-二进制炸弹解密（1）/bomb-1-1.jpg\" alt=\"\"><br><br><br>&nbsp; phase1函数的反汇编代码如上图，可以看出phase1还是hin简单的orz接下来我们来分析一下代码。<br><br><br>    push %ebp<br>    mov  %esp,%ebp<br>    sub  $0X10,%esp<br>这段代码是常见的函数初始化过程<br><br><br>    push  $0X8049678<br>    pushl 0X8(%ebb)<br>    call  8048f2f&lt;strings_not_equal&gt;<br>这是&lt;strings_not_equal&gt;这个函数的调用过程，传入了0X8049678和0X8（%ebb）这两个地址的参数.<br><br><br>    add  $0X10,%esp<br>    test %eax,%eax<br>    je   8048b3b&lt;phase_1+0X1f&gt;<br>    call 80493ec&lt;explode_bomb&gt;<br>    leave<br>    ret</p>\n<p>test指令检测eax寄存器，并且je指令判断结果，以决定是跳至8048b3b leave还是调用&lt;explode_bomb&gt;函数。<br><br><br>&nbsp; 分析了整个phase1函数后我们发现，整个phase1函数的关键点在于0X8049678这个地址存储的数据，然而如何找出呢，这时候就要用到gdb这个调试工具了。<br><br><br>&nbsp; 首先我们在终端中打开gdb,然后通过</p>\n<blockquote>\n<p>(gdb) file bomb</p>\n</blockquote>\n<p>在gdb中打开bomb文件<br><br><br>随后我们通过</p>\n<blockquote>\n<p>(gdb) p 0X8049678</p>\n</blockquote>\n<p>这个指令打印8049678地址存储的数据。然而我们却发现打印出的数据是一段看起来毫无意义的数字。<br><br><br>我们再通过</p>\n<blockquote>\n<p>(gdb) p(char *)0X8049678</p>\n</blockquote>\n<p>将其转换成字符串打印。结果为：<br><img src=\"/2018/05/12/bomb-二进制炸弹解密（1）/bomb-1-2.png\" alt=\"\"><br><br><br>至此，我们就解开了第一个炸弹。</p>\n","categories":["汇编"],"tags":["汇编"]},{"title":"Arduino初学（1）","url":"http://yoursite.com/2018/05/12/Ardunio初学（1）/","content":"<blockquote>\n<p>上一篇blog说要保持一天一更，也许应该是指到次日的两点前吧（笑）</p>\n</blockquote>\n<blockquote>\n<p>初次接触Ardunio，打算做一个流水灯，结果好像也不是很顺利啊orz</p>\n</blockquote>\n<p><strong>第一次尝试</strong></p>\n<p>从学校的仓库借到了全套的开发套件了lol，但拖到晚上才开始正式的调试<br><br>按照网上的图示安装好了电路，烧进了程序，但是当我满怀信心的打开程序时却什么都没发生orz<br><br><br><img src=\"/2018/05/12/Ardunio初学（1）/Ardunio-1-1.jpg\" alt=\"\"><br><br><br>初始电路板如图</p>\n<p><strong>改正过程</strong></p>\n<p>根据网上的接线图进行对比后<br><br><img src=\"/2018/05/12/Ardunio初学（1）/Ardunio-1-2.png\" alt=\"\"></p>\n<p>博主突然发现，led的接脚接反了有没有……<br><br><br>于是只好拔了重接orz，最后历经长达<strong>半小时</strong>之久，终于点亮了人生中第一个LED灯2333<br><br><br><em>附代码</em></p>\n<pre><code>void setup() \n{\n  // 初始化I/O口\n  for(int i=2;i&lt;8;i++)\n    pinMode(i,OUTPUT);\n}\n\nvoid loop() \n{\n  // 从引脚2到引脚6，逐个点亮LED，等待1秒再熄灭LED\n  for(int i=2;i&lt;7;i++)\n  {\n    digitalWrite(i,HIGH);\n    delay(1000);\n    digitalWrite(i,LOW);   \n  }\n  // 从引脚7到引脚3，逐个点亮LED，等待1秒再熄灭LED\n  for(int i=7;i&gt;2;i--)\n  {\n    digitalWrite(i,HIGH);\n    delay(1000);\n    digitalWrite(i,LOW);   \n  } \n}\n</code></pre>","categories":["Ardunio"],"tags":["Ardunio"]},{"title":"第一篇博客","url":"http://yoursite.com/2018/05/10/a-new-blog/","content":" <center>MY FIRST BLOG</center>\n\n\n<blockquote>\n<p>终于下定决心开始写博客了2333</p>\n</blockquote>\n<blockquote>\n<p>打算给自己定一些目标，希望能够实现orz</p>\n</blockquote>\n<center><br><br><br><strong>1. CTF基础入门<br></strong><br><strong>2. lunix入门<br></strong><br><strong>3. 汇编语言入门<br></strong><br><strong>4. ardunio，树莓派入门<br></strong><br></center>\n\n\n<blockquote>\n<p>希望能够实现吧2333，以后保持每天都更新博客</p>\n</blockquote>\n<blockquote>\n<p>用来防止自己偷懒orz</p>\n</blockquote>\n","categories":["日常随笔"],"tags":["随笔"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]